# Generated by Django 3.1.2 on 2021-02-27 11:20

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='SQRLNut',
            fields=[
                ('nonce', models.CharField(db_index=True, help_text='Single-use random nonce used to identify SQRL transaction. This nonce is regenerated for each SQRL communication within a single SQRL transaction. Since this nonce is a one-time token, it allows for the sviewerver to prevent replay attacks.', max_length=43, primary_key=True, serialize=False, unique=True)),
                ('transaction_nonce', models.CharField(db_index=True, help_text='A random nonce used to identify a full SQRL transaction. Session key cannot be used since it is persistent across complete user visit which can include multiple tabs/windows. This transaction id is regenerated for each new tab which allows the client to identify when a particular SQRL transaction has completed hence redirect user to more appropriate page.', max_length=43, unique=True)),
                ('session_key', models.CharField(db_index=True, help_text='User regular session key. This is used to associate client session to a SQRL transaction since transaction can be completed on a different device which does not have access to original user session.', max_length=32, unique=True)),
                ('is_transaction_complete', models.BooleanField(default=False, help_text='Indicator whether transaction is complete. Can we used by UI to automatically redirect to appropriate page once SQRL transaction is complete.')),
                ('ip_address', models.GenericIPAddressField(help_text='Originating IP address of client who initiated SQRL transaction. Used to set appropriate TIF response code.')),
                ('timestamp', models.DateTimeField(auto_now=True, help_text='Last timestamp when nut was either created or modified. Used for purging purposes.')),
            ],
            options={
                'verbose_name': 'SQRL Nut',
                'verbose_name_plural': 'SQRL Nuts',
                'db_table': 'sqrl_nut',
            },
        ),
        migrations.CreateModel(
            name='SQRLIdentity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('public_key', models.CharField(db_index=True, help_text='Public key of per-site users public-private key pair. This key is used to verify users signature signing SQRL transaction including server generated random nut using users private key.', max_length=43, unique=True)),
                ('server_unlock_key', models.CharField(blank=True, help_text='This is public unlock key sent to client which client can use to generate urs (unlock request signature) signature which server can validate using vuk.', max_length=43)),
                ('verify_unlock_key', models.CharField(blank=True, help_text='This is a key stored by server which is used to validate urs (unlock request signature) signatures. This key is not sent to user.', max_length=43)),
                ('is_enabled', models.BooleanField(default=True, help_text='Boolean indicating whether user can authenticate using SQRL.')),
                ('is_only_sqrl', models.BooleanField(default=False, help_text='Boolean indicating that only SQRL should be allowed to authenticate user. When enabled via flag in SQRL client requests, this should disable all other methods of authentication such as username/password.')),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='sqrl_identity', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'SQRL Identity',
                'verbose_name_plural': 'SQRL Identities',
                'db_table': 'sqrl_identity',
            },
        ),
    ]
